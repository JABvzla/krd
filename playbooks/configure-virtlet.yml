---
# SPDX-license-identifier: Apache-2.0
##############################################################################
# Copyright (c) 2018
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################
- hosts: localhost
  become: yes
  vars:
    images_file: /tmp/images.yaml
    virtletctl:
      dir: /opt/virtlet
      file: virtletctl
  roles:
    - andrewrothstein.kubectl
  tasks:
    - name: Load krd variables
      include_vars:
        file: krd-config.yml
    - name: apply virtlet extraRuntime label
      command: "/usr/local/bin/kubectl label node {{ item }} extraRuntime=virtlet --overwrite"
      with_inventory_hostnames: virtlet
    - name: create image translations confimap file
      blockinfile:
        path: "{{ images_file }}"
        create: yes
        block: |
          translations:
            - name: ubuntu/16.04
              url: https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img
            - regexp: 'centos/(\d+)-(\d+)'
              url: 'https://cloud.centos.org/centos/$1/images/CentOS-$1-x86_64-GenericCloud-$2.qcow2'
            - name: fedora
              url: https://download.fedoraproject.org/pub/fedora/linux/releases/27/CloudImages/x86_64/images/Fedora-Cloud-Base-27-1.6.x86_64.qcow2
          {% if lookup('env','http_proxy') != "" %}
          transports:
            "":
              proxy: "{{ lookup('env','http_proxy') }}"
          {% endif %}
    - name: install image translations configmap
      shell: "/usr/local/bin/kubectl create configmap -n kube-system virtlet-image-translations --from-file {{ images_file }} --dry-run -o yaml | /usr/local/bin/kubectl apply -f -"
      ignore_errors: True
    - name: create Virtlet folder
      file:
        state: directory
        path: "{{ virtletctl.dir }}"
    - name: download virtletctl
      get_url:
        url: "https://github.com/Mirantis/virtlet/releases/download/v{{ virtlet_version }}/virtletctl"
        dest: "{{ virtletctl.dir }}/{{ virtletctl.file }}"
    - name: set virtletctl execution permissions
      file:
        path: "{{ virtletctl.dir }}/{{ virtletctl.file }}"
        mode: "+x"
    - name: install virtletctl as kubectl plugin
      command: "{{ virtletctl.dir }}/{{ virtletctl.file }} install"
    - name: create Virtlet k8s objects
      shell: "/usr/local/bin/kubectl plugin virt gen | /usr/local/bin/kubectl apply -f -"
      ignore_errors: True
    - name: wait for Virtlet daemonset
      shell: "/usr/local/bin/kubectl get ds virtlet -n=kube-system -o=jsonpath --template={.status.numberReady}"
      register: daemonset
      until:
        - '1'
      retries: 6
      delay: 10

- hosts: virtlet
  become: yes
  tasks:
    - name: Load krd variables
      include_vars:
        file: krd-config.yml
    - name: disable AppArmor in all nodes
      service:
        name: apparmor
        state: stopped
        enabled: no
      when: ansible_os_family == "Debian"
    - name: modify args for kubelet service
      lineinfile:
        dest: /etc/systemd/system/kubelet.service
        line: "                --container-runtime=remote --container-runtime-endpoint=unix:///run/criproxy.sock --image-service-endpoint=unix:///run/criproxy.sock --enable-controller-attach-detach=false \\"
        insertafter: '^ExecStart=/usr/local/bin/kubelet *'
        state: present
    - name: create dockershim service
      blockinfile:
        path: /etc/systemd/system/dockershim.service
        create: yes
        block: |
          [Unit]
          Description=dockershim for criproxy

          [Service]
          EnvironmentFile=-/etc/kubernetes/kubelet.env
          ExecStartPre=-/bin/mkdir -p /var/lib/kubelet/volume-plugins
          ExecStart=/usr/local/bin/kubelet --experimental-dockershim --port 11250 \
                $KUBE_LOGTOSTDERR \
                $KUBE_LOG_LEVEL \
                $KUBELET_API_SERVER \
                $KUBELET_ADDRESS \
                $KUBELET_PORT \
                $KUBELET_HOSTNAME \
                $KUBE_ALLOW_PRIV \
                $KUBELET_ARGS \
                $DOCKER_SOCKET \
                $KUBELET_NETWORK_PLUGIN \
                $KUBELET_VOLUME_PLUGIN \
                $KUBELET_CLOUDPROVIDER
          Restart=always
          StartLimitInterval=0
          RestartSec=10

          [Install]
          RequiredBy=criproxy.service
    - name: download CRIproxy package
      get_url:
        url: "https://github.com/Mirantis/criproxy/releases/download/v{{ criproxy_version }}/criproxy"
        dest: /usr/local/bin/criproxy
    - name: set criproxy execution permissions
      file:
        path: /usr/local/bin/criproxy
        mode: "+x"
    - name: create criproxy service
      blockinfile:
        path: /etc/systemd/system/criproxy.service
        create: yes
        block: |
          [Unit]
          Description=CRI Proxy

          [Service]
          ExecStart=/usr/local/bin/criproxy -v 3 -logtostderr -connect /var/run/dockershim.sock,virtlet.cloud:/run/virtlet.sock -listen /run/criproxy.sock
          Restart=always
          StartLimitInterval=0
          RestartSec=10

          [Install]
          WantedBy=kubelet.service
    - name: start criproxy and dockershim services
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items:
      - dockershim
      - criproxy
    - name: restart kubelet services
      service:
        name: kubelet
        state: restarted
